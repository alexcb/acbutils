#!/usr/bin/python3
import acbutils.ssh
import sys
import textwrap

pname = sys.argv[0]
usage = 'usage: %s [optional flags] <host 1> <host 2> ... <host n> -- <command>' % pname

def print_help_and_exit():
    print(usage)
    print(textwrap.dedent('''
    Flags:
      --help         shows this message
      --blind-trust  disables ssh key checking

    Examples:
      %(pname)s host1 host2 host3 -- uptime
      %(pname)s host{1,2,3} -- df -h /
      %(pname)s host{01..16} -- hostname -f
      %(pname)s host{01..16} -- 'ls -la / | grep home'
      %(pname)s --blind-trust host1 host2 host3 -- sudo whoami
    ''' % {'pname': pname,}))
    sys.exit(0)


args = sys.argv[1:]
try:
    sep = args.index('--')
except ValueError:
    if '--help' in args or '-h' in args:
        print_help_and_exit()
    print(usage)
    sys.exit(1)

hosts = args[:sep]
command = args[(sep+1):]

flags = {
    'help': ('--help', '-h'),
    'blind-trust': ('--blind-trust',),
    'group-output': ('-g',),
    }
set_flags = {x:0 for x in flags.keys()}
def check_flag(s):
    for k, v in flags.items():
        for x in v:
            if x == s:
                set_flags[k] += 1


for i, s in enumerate(hosts):
    if s.startswith('-'):
        try:
            check_flag(s)
        except ValueError:
            sys.exit(f'invalid option {s}')
    else:
        hosts = hosts[i:]
        break

if set_flags['help']:
    print_help_and_exit()

blind_trust = bool(set_flags['blind-trust'])
group_output = bool(set_flags['group-output'])

shell = True
if len(command) > 1:
    shell = False

scripts = {}
for host in hosts:
  scripts[host] = acbutils.ssh.build_remote_script(textwrap.dedent('''
    import sys
    import subprocess

    try:
        proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)
    except OSError as e:
        print('failed run run %s: %s' % (repr(command), e))
        sys.exit(127)
    stdout, stderr = proc.communicate()
    status = proc.returncode

    if stdout:
        print(stdout)
    if stderr:
        print(stderr)
    sys.exit(status)
    '''),
    vars={
        'shell': shell,
        'command': command,
        })

ssh_opts = [
    '-o', 'BatchMode=yes',
    '-o', 'ConnectTimeout=30', # TODO option
    ]

if blind_trust:
    ssh_opts.extend(['-o', 'UserKnownHostsFile=/dev/null', '-o', 'StrictHostKeyChecking=no', '-o', 'LogLevel=error'])

results = acbutils.ssh.run_scripts_over_ssh_parallel(scripts, ssh_opts=ssh_opts, status=True, max_conn=25, timeout=30)

if group_output:
    for i, (host, (exit_code, output)) in enumerate(results.items()):
        if i > 0:
            print('')
        print('-'*len(host))
        print(host)
        print('-'*len(host))
        if output:
            print(output)
        print(f'exit code: {exit_code}')
else:
    print(acbutils.ssh.tabulate_results(results))

#for host, script in scripts.items():
#    acbutils.ssh.run_script_over_ssh(host, script, sudo=False, ssh_opts=ssh_opts, num_retry=3)
